import { render, screen } from "@testing-library/react";
import { afterEach, beforeEach, describe, expect, test, vi } from "vitest";
import HourlyForecast from "../components/HourlyForecast";
import userEvent from "@testing-library/user-event"



describe("It contains the test cases related to the hourly component", () => {
  const mockFormatTime=vi.fn((dateString)=>{
    const date=new Date(dateString);
    const formatter=new Intl.DateTimeFormat('en-Us',{
        hour:'numeric',
        hour12:true
    })
    const formattedTime=formatter.format(date);
    return formattedTime
  })
  const mockWeatherIcon = vi.fn((weatherCode) => {
    if (weatherCode === 1) {
      return "./assets/images/icon-sunny.webp";
    }
  });
  const mockWeatherData = {
    current: {},
    currentUnits: {},
    daily: {},
    daily_units: {},
    hourly: {
      time: [
        "2025-10-21T00:00",
        "2025-10-21T01:00",
        "2025-10-21T02:00",
        "2025-10-21T03:00",
        "2025-10-21T04:00",
        "2025-10-21T05:00",
        "2025-10-21T06:00",
        "2025-10-21T07:00",
        "2025-10-21T08:00",
        "2025-10-21T09:00",
        "2025-10-21T10:00",
        "2025-10-21T11:00",
        "2025-10-21T12:00",
        "2025-10-21T13:00",
        "2025-10-21T14:00",
        "2025-10-21T15:00",
        "2025-10-21T16:00",
        "2025-10-21T17:00",
        "2025-10-21T18:00",
        "2025-10-21T19:00",
        "2025-10-21T20:00",
        "2025-10-21T21:00",
        "2025-10-21T22:00",
        "2025-10-21T23:00",
        "2025-10-22T00:00",
        "2025-10-22T01:00",
        "2025-10-22T02:00",
        "2025-10-22T03:00",
        "2025-10-22T04:00",
        "2025-10-22T05:00",
        "2025-10-22T06:00",
        "2025-10-22T07:00",
        "2025-10-22T08:00",
        "2025-10-22T09:00",
        "2025-10-22T10:00",
        "2025-10-22T11:00",
        "2025-10-22T12:00",
        "2025-10-22T13:00",
        "2025-10-22T14:00",
        "2025-10-22T15:00",
        "2025-10-22T16:00",
        "2025-10-22T17:00",
        "2025-10-22T18:00",
        "2025-10-22T19:00",
        "2025-10-22T20:00",
        "2025-10-22T21:00",
        "2025-10-22T22:00",
        "2025-10-22T23:00",
        "2025-10-23T00:00",
        "2025-10-23T01:00",
        "2025-10-23T02:00",
        "2025-10-23T03:00",
        "2025-10-23T04:00",
        "2025-10-23T05:00",
        "2025-10-23T06:00",
        "2025-10-23T07:00",
        "2025-10-23T08:00",
        "2025-10-23T09:00",
        "2025-10-23T10:00",
        "2025-10-23T11:00",
        "2025-10-23T12:00",
        "2025-10-23T13:00",
        "2025-10-23T14:00",
        "2025-10-23T15:00",
        "2025-10-23T16:00",
        "2025-10-23T17:00",
        "2025-10-23T18:00",
        "2025-10-23T19:00",
        "2025-10-23T20:00",
        "2025-10-23T21:00",
        "2025-10-23T22:00",
        "2025-10-23T23:00",
        "2025-10-24T00:00",
        "2025-10-24T01:00",
        "2025-10-24T02:00",
        "2025-10-24T03:00",
        "2025-10-24T04:00",
        "2025-10-24T05:00",
        "2025-10-24T06:00",
        "2025-10-24T07:00",
        "2025-10-24T08:00",
        "2025-10-24T09:00",
        "2025-10-24T10:00",
        "2025-10-24T11:00",
        "2025-10-24T12:00",
        "2025-10-24T13:00",
        "2025-10-24T14:00",
        "2025-10-24T15:00",
        "2025-10-24T16:00",
        "2025-10-24T17:00",
        "2025-10-24T18:00",
        "2025-10-24T19:00",
        "2025-10-24T20:00",
        "2025-10-24T21:00",
        "2025-10-24T22:00",
        "2025-10-24T23:00",
        "2025-10-25T00:00",
        "2025-10-25T01:00",
        "2025-10-25T02:00",
        "2025-10-25T03:00",
        "2025-10-25T04:00",
        "2025-10-25T05:00",
        "2025-10-25T06:00",
        "2025-10-25T07:00",
        "2025-10-25T08:00",
        "2025-10-25T09:00",
        "2025-10-25T10:00",
        "2025-10-25T11:00",
        "2025-10-25T12:00",
        "2025-10-25T13:00",
        "2025-10-25T14:00",
        "2025-10-25T15:00",
        "2025-10-25T16:00",
        "2025-10-25T17:00",
        "2025-10-25T18:00",
        "2025-10-25T19:00",
        "2025-10-25T20:00",
        "2025-10-25T21:00",
        "2025-10-25T22:00",
        "2025-10-25T23:00",
        "2025-10-26T00:00",
        "2025-10-26T01:00",
        "2025-10-26T02:00",
        "2025-10-26T03:00",
        "2025-10-26T04:00",
        "2025-10-26T05:00",
        "2025-10-26T06:00",
        "2025-10-26T07:00",
        "2025-10-26T08:00",
        "2025-10-26T09:00",
        "2025-10-26T10:00",
        "2025-10-26T11:00",
        "2025-10-26T12:00",
        "2025-10-26T13:00",
        "2025-10-26T14:00",
        "2025-10-26T15:00",
        "2025-10-26T16:00",
        "2025-10-26T17:00",
        "2025-10-26T18:00",
        "2025-10-26T19:00",
        "2025-10-26T20:00",
        "2025-10-26T21:00",
        "2025-10-26T22:00",
        "2025-10-26T23:00",
        "2025-10-27T00:00",
        "2025-10-27T01:00",
        "2025-10-27T02:00",
        "2025-10-27T03:00",
        "2025-10-27T04:00",
        "2025-10-27T05:00",
        "2025-10-27T06:00",
        "2025-10-27T07:00",
        "2025-10-27T08:00",
        "2025-10-27T09:00",
        "2025-10-27T10:00",
        "2025-10-27T11:00",
        "2025-10-27T12:00",
        "2025-10-27T13:00",
        "2025-10-27T14:00",
        "2025-10-27T15:00",
        "2025-10-27T16:00",
        "2025-10-27T17:00",
        "2025-10-27T18:00",
        "2025-10-27T19:00",
        "2025-10-27T20:00",
        "2025-10-27T21:00",
        "2025-10-27T22:00",
        "2025-10-27T23:00",
      ],
      temperature_2m: [
        9.4, 8.9, 8.5, 8.3, 8.1, 7.8, 7.9, 8.3, 10.5, 12.8, 13.7, 13.3, 14,
        14.2, 14.4, 13.7, 13.9, 13.7, 12.5, 10.9, 10.1, 9.5, 9.1, 8.7, 8.4, 8.1,
        7.8, 7.4, 7.1, 6.8, 6.7, 7, 9.9, 12.8, 13.1, 13.9, 14.6, 14.9, 14.8,
        15.2, 15.2, 14.8, 13.2, 10.4, 9.1, 8.4, 8, 7.6, 7.4, 7.2, 6.9, 6.5, 6.2,
        6, 5.8, 6.2, 9.4, 12.5, 12.9, 13.5, 14.5, 15, 15.4, 15.7, 15.6, 14.7,
        14, 10.5, 9.4, 8.8, 8, 7.7, 7.3, 6.9, 6.7, 6.5, 6.3, 6.1, 5.9, 6.3, 9.3,
        13, 13.4, 14.2, 14.8, 15.5, 15.7, 15.7, 15.7, 14.9, 13.2, 10.9, 9.2,
        8.3, 7.9, 7.6, 7.3, 7, 6.7, 6.3, 6, 6.1, 6.8, 8.1, 9.4, 11, 12.8, 14.2,
        15.1, 15.6, 15.9, 16.1, 16, 15.3, 13.5, 11.1, 9.2, 8.4, 8, 7.8, 7.5,
        7.3, 7.1, 6.7, 6.3, 6.3, 6.9, 7.9, 9.2, 10.9, 12.9, 14.3, 15, 15.5,
        15.8, 15.9, 15.7, 15, 13.4, 11.4, 9.8, 8.9, 8.5, 8.2, 7.9, 7.7, 7.5,
        7.1, 6.7, 6.7, 7.3, 8.3, 9.6, 11.1, 12.9, 14.2, 14.8, 15, 15, 15.1,
        15.1, 14.5, 13, 10.9, 9.2, 8.3, 7.8, 7.5,
      ],
      relative_humidity_2m: [
        70, 72, 72, 73, 73, 72, 71, 69, 67, 71, 64, 69, 67, 66, 62, 64, 58, 58,
        65, 70, 72, 72, 70, 70, 71, 72, 73, 74, 74, 75, 75, 75, 71, 60, 63, 61,
        59, 58, 59, 54, 54, 56, 63, 73, 71, 71, 71, 72, 72, 73, 74, 76, 78, 79,
        80, 79, 73, 64, 65, 65, 62, 58, 57, 56, 56, 61, 64, 75, 68, 56, 53, 55,
        59, 61, 62, 63, 64, 64, 63, 61, 59, 52, 55, 56, 54, 49, 47, 48, 50, 53,
        55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 65, 65, 64, 63, 61, 59, 56, 53,
        51, 49, 48, 47, 47, 49, 54, 60, 65, 66, 65, 64, 64, 65, 65, 65, 64, 63,
        62, 61, 60, 58, 56, 55, 54, 52, 50, 50, 51, 53, 58, 65, 69, 69, 67, 66,
        66, 67, 67, 68, 68, 68, 67, 66, 64, 62, 59, 57, 56, 56, 56, 56, 55, 56,
        59, 64, 67, 68, 68, 68,
      ],
      precipitation: [
        0, 0, 0, 0, 0, 0, 0.1, 0, 0, 0, 0, 0, 0.1, 0.1, 0.2, 0.5, 0.1, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, 0.1, 0.1, 0, 0,
        0, 0, 0, 0, 0, 0, 0,
      ],
      wind_speed_10m: [
        6.8, 7.8, 8.9, 8.7, 8.5, 7.3, 7.4, 7.3, 4.8, 1.5, 8.9, 9.2, 9.4, 9.2,
        8.7, 4.8, 4.9, 3.4, 2.5, 6.4, 6.9, 7.3, 7.3, 7.3, 7.6, 7.9, 7.9, 7.9,
        7.7, 8, 8, 8.2, 3.9, 5.9, 7.3, 6.4, 7.6, 4.2, 2.9, 1.9, 3.1, 2.2, 3.3,
        7.2, 8.6, 8.4, 9, 9.3, 9, 8.5, 8.7, 8.7, 8.7, 9, 9, 9.2, 5.4, 4.8, 5.6,
        6.9, 7.1, 5.2, 3.4, 2.3, 3.2, 3.1, 3.5, 7.7, 9.2, 9.2, 9.2, 9.8, 9.8,
        10.1, 9.8, 9.7, 9.3, 9.2, 9.2, 9.2, 5.5, 4.8, 6.4, 8.2, 7.4, 6.8, 6.3,
        3.2, 3.9, 4.7, 6.4, 7.7, 8.9, 9.5, 9.8, 9.8, 9.8, 9.8, 9.8, 9.8, 10.1,
        9.7, 9, 8.2, 6.1, 2.2, 4.5, 8.2, 8.7, 7.5, 6.3, 4.9, 3.2, 1.5, 2.8, 6.2,
        8.7, 9.8, 9.8, 9.8, 9.8, 9.3, 9.2, 9.2, 9, 8.7, 8, 7.1, 5, 1.1, 4.9,
        8.9, 10, 9.4, 7.9, 5.4, 2.3, 1.8, 3.6, 5.5, 7.6, 8.4, 8.9, 9, 9, 8.5,
        8.4, 8.6, 8.8, 8.7, 8, 6.5, 4.6, 1.8, 4.3, 7.2, 7.4, 5.9, 4.5, 4, 4.2,
        4.1, 4, 5.7, 7.7, 8.5, 8.4, 8.2,
      ],
      weather_code: [
        1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 80, 80, 1, 1, 2, 2, 2, 2, 1,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 3, 3, 3, 0, 0, 0, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 80, 80, 0, 0, 0, 0, 0, 0, 0,
        0, 0,
      ],
      apparent_temperature: [
        7.1, 6.4, 5.7, 5.5, 5.3, 5.2, 5.2, 5.6, 8.5, 12, 11.7, 11.4, 12.1, 12.4,
        12.4, 12.3, 12.2, 12.1, 11.1, 8.9, 8, 7.1, 6.6, 6.2, 5.7, 5.4, 5.1, 4.7,
        4.3, 4, 3.8, 4.2, 8.1, 10.8, 11.1, 12.3, 12.9, 13.4, 13.6, 13.9, 13.7,
        13.5, 11.8, 8.3, 6.5, 5.6, 5.1, 4.6, 4.4, 4.3, 4, 3.5, 3.3, 3, 2.8, 3.2,
        7.3, 10.7, 11.4, 12.1, 13.5, 13.5, 14.1, 14.6, 14.4, 13.6, 12.8, 8.5,
        6.6, 5.4, 4.4, 4, 3.7, 3.3, 3.1, 3, 2.8, 2.6, 2.3, 2.7, 6.6, 10.7, 11.5,
        12.9, 13.2, 13.7, 13.5, 13.9, 14, 13.1, 10.9, 8.1, 5.9, 4.9, 4.4, 4.1,
        3.8, 3.5, 3.2, 2.8, 2.4, 2.5, 3.5, 5, 6.8, 9.2, 10.8, 12.5, 13.5, 13.8,
        13.7, 14.1, 14.3, 13.8, 11.8, 8.7, 6.3, 5.2, 4.8, 4.4, 4.1, 4, 3.8, 3.3,
        2.8, 2.8, 3.7, 4.9, 6.7, 9.1, 10.8, 12.6, 13.4, 13.6, 13.5, 14, 14.2,
        13.6, 11.8, 9.4, 7.3, 6.2, 5.6, 5.1, 4.8, 4.7, 4.5, 4, 3.5, 3.5, 4.2,
        5.6, 7.3, 9.5, 11, 12.8, 13.6, 13.6, 13.4, 13.6, 13.5, 12.9, 11.2, 8.7,
        6.5, 5.4, 4.9, 4.5,
      ],
    },
    hourly_units:{
    time: "iso8601",
    weather_code: "wmo code",
    temperature_2m_max: "°C",
    temperature_2m_min: "°C",
    temperature_2m:"°C"
}

  };
  test('it tests the dropDown is present ',async()=>{
   
    render(<HourlyForecast hourlyForecast={mockWeatherData.hourly} getWeatherIcon={mockWeatherIcon} units={mockWeatherData.hourly_units} />);
    const dropdownEl=await screen.findByTestId('dropDown');
    
   const user=userEvent.setup();
    
    await user.click(dropdownEl);
     const weekdaysEl=await screen.findByTestId('weekdays')
    expect(weekdaysEl).toBeVisible();
  })
  test('it tests the dropDown closes on clicking of the any day of the data ',async()=>{
     
    render(<HourlyForecast hourlyForecast={mockWeatherData.hourly} getWeatherIcon={mockWeatherIcon} units={mockWeatherData.hourly_units} />);
    const dropdownEl=screen.getByTestId('dropDown');
   const user=userEvent.setup();
   
    await user.click(dropdownEl);
     const weekdaysEl=screen.getByTestId('weekdays')
    expect(weekdaysEl).toBeVisible();
    const dayEl=screen.getByText('Sunday');
    await user.click(dayEl);
     expect(weekdaysEl).not.toBeVisible();
  })
  test('weather image icon is present in the hourly card or not',async ()=>{
     vi.setSystemTime(new Date('2025-10-21T12:00:00'));
     
    render(<HourlyForecast hourlyForecast={mockWeatherData.hourly} getWeatherIcon={mockWeatherIcon} units={mockWeatherData.hourly_units} />);
    const imgEl=await screen.findAllByTestId('imgEl')
    expect(mockWeatherIcon).toHaveBeenCalled();
   
    const expectedSrc=mockWeatherIcon(mockWeatherData.hourly.weather_code[0]);
    expect(imgEl[0]).toHaveAttribute('src',expectedSrc)

  })
  test('weather time is present in the hourly card or not',async ()=>{
     vi.setSystemTime(new Date('2025-10-21T12:00:00'));
     
    render(<HourlyForecast hourlyForecast={mockWeatherData.hourly} getWeatherIcon={mockWeatherIcon} units={mockWeatherData.hourly_units} />);
    const timeEl=await screen.findAllByTestId('time')
   
   
    const expectedtime=mockFormatTime(mockWeatherData.hourly.time[0])
     expect(mockFormatTime).toHaveBeenCalled();
  expect(timeEl[0]).toHaveTextContent(expectedtime)

  })
  test('weather time is present in the hourly card or not',async ()=>{
     vi.setSystemTime(new Date('2025-10-21T12:00:00'));
     
    render(<HourlyForecast hourlyForecast={mockWeatherData.hourly} getWeatherIcon={mockWeatherIcon} units={mockWeatherData.hourly_units} />);
    const temperatureEl=await screen.findAllByTestId('temperature')
   
   
    const expectedtext=`${mockWeatherData.hourly.temperature_2m[0]}${mockWeatherData.hourly_units.temperature_2m.slice(0,1)}`
     expect(temperatureEl[0]).toHaveTextContent(expectedtext)


  })
});
